package com.github.argon.moduploader.core.vendor.steam.mapper;

import com.codedisaster.steamworks.SteamID;
import com.codedisaster.steamworks.SteamPublishedFileID;
import com.codedisaster.steamworks.SteamUGCDetails;
import com.github.argon.moduploader.core.vendor.CommonMapper;
import com.github.argon.moduploader.core.vendor.steam.model.SteamMod;
import jakarta.enterprise.context.ApplicationScoped;
import org.mapstruct.factory.Mappers;

import java.util.List;

/**
 * The {@link com.codedisaster.steamworks.SteamAPI} conflicts with Mapstruct.
 * Mapstruct will try to read the Steam Objects on compile time,
 * but the native SteamAPI library isn't available there yet.
 * So we cannot use autogenerated mappers for Steam =(
 */
@ApplicationScoped
public class SteamMapper {

    CommonMapper commonMapper = Mappers.getMapper(CommonMapper.class);

    public SteamMod.Remote map(SteamUGCDetails details) {
        return new SteamMod.Remote(
            toLong(details.getPublishedFileID()),
            details.getTitle(),
            (details.getTags() == null) ? List.of() : commonMapper.toList(details.getTags()),
            details.getDescription(),
            details.getFileSize(),
            details.getOwnerID().getAccountID(),
            commonMapper.toInstant(details.getTimeCreated()),
            commonMapper.toInstant(details.getTimeUpdated()),
            details.getVotesUp(),
            details.getVotesDown()
        );
    }

    public SteamMod.Local map(SteamPublishedFileID publishedFileID, SteamMod.Local mod) {
        return new SteamMod.Local(
            toLong(publishedFileID),
            mod.name(),
            mod.description(),
            mod.tags(),
            mod.contentFolder(),
            mod.previewImage()
        );
    }

    public Long toLong(SteamPublishedFileID publishedFileID) {
        return Long.parseLong(publishedFileID.toString(), 16);
    }

    public Integer map(SteamID value) {
        return Integer.parseInt(value.toString(), 16);
    }



}
